#######################################################################
# Test for copying block of size 20;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $20, %rdx		# src and dst have 20 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Lan Haoning 518021910270
# Describe how and why you modified the baseline code.
# Try1:
# 1.iaddq, reduce instructions
# 2.loop unrolling(10), reduce reliance
# score:52.1??? thinking...
# ten way 53.0
# when num is small, the performance is bad
# consider remain
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

# Considering initial condition ,annotate this
#	xorq %rax,%rax		      # count = 0;

	#Check if there are 10 elements.
Test10E:
	iaddq $-10,%rdx		      # len < 10?
	jl Solve10less		      # if so, goto Solve10less:

    # 10 loop unrolling
Loop10:	
    mrmovq (%rdi), %rcx	      # read val1 from src...
	mrmovq 0x8(%rdi), %r8     # read val2 from src...
	mrmovq 0x10(%rdi), %r9    # read val3 from src...
	mrmovq 0x18(%rdi), %r10   # read val4 from src...
	mrmovq 0x20(%rdi), %r11   # read val5 from src...
	mrmovq 0x28(%rdi), %r12   # read val6 from src...
	mrmovq 0x30(%rdi), %r13   # read val7 from src...
	mrmovq 0x38(%rdi), %r14   # read val8 from src...
	mrmovq 0x40(%rdi), %rbp	  # read val9 from src...
	mrmovq 0x48(%rdi), %rbx	  # read val10 from src...

################################################### bubble here

    rmmovq %rcx, (%rsi)	      # ...and store val1 to dst
	rmmovq %r8, 0x8(%rsi)     # ...and store val2 to dst
	rmmovq %r9, 0x10(%rsi)    # ...and store val3 to dst
	rmmovq %r10, 0x18(%rsi)   # ...and store val4 to dst
	rmmovq %r11, 0x20(%rsi)   # ...and store val5 to dst
	rmmovq %r12, 0x28(%rsi)   # ...and store val6 to dst
	rmmovq %r13, 0x30(%rsi)   # ...and store val7 to dst
	rmmovq %r14, 0x38(%rsi)   # ...and store val8 to dst
	rmmovq %rbp, 0x40(%rsi)   # ...and store val9 to dst
	rmmovq %rbx, 0x48(%rsi)   # ...and store val10 to dst

Test101:
	andq %rcx, %rcx		      # val1 <= 0?
	jle Test102		          # if so, goto Test102:
	iaddq $1, %rax		      # count++

Test102:
	andq %r8, %r8		      # val2 <= 0?
	jle Test103		          # if so, goto Test103:
	iaddq $1, %rax		      # count++

Test103:
	andq %r9, %r9		      # val3 <= 0?
	jle Test104		          # if so, goto Test104:
	iaddq $1, %rax		      # count++

Test104:
	andq %r10, %r10		      # val4 <= 0?
	jle Test105		          # if so, goto Test105:
	iaddq $1, %rax		      # count++

Test105:
	andq %r11, %r11		      # val5 <= 0?
	jle Test106		          # if so, goto Test106:
	iaddq $1, %rax		      # count++

Test106:
	andq %r12, %r12		      # val6 <= 0?
	jle Test107		          # if so, goto Test107:
	iaddq $1, %rax		      # count++

Test107:
	andq %r13, %r13  	      # val7 <= 0?
	jle Test108		          # if so, goto Test108:
	iaddq $1, %rax		      # count++

Test108:
	andq %r14, %r14  	      # val8 <= 0?
	jle Test109		          # if so, goto Test109:
	iaddq $1, %rax		      # count++

Test109:
	andq %rbp, %rbp  	      # val9 <= 0?
	jle Test1010		      # if so, goto Test1010:
	iaddq $1, %rax		      # count++

Test1010:
	andq %rbx, %rbx  	      # val10 <= 0?
	jle Npos10		          # if so, goto Npos10:
	iaddq $1, %rax		      # count++

Npos10:	

	iaddq $0x50, %rdi		      # src+=10
	iaddq $0x50, %rsi		      # dst+=10
	iaddq $-10, %rdx		      # len < 10?
	jg Loop10			          # if so, goto Loop10:

# elements less then 10

# loop unrolling(2) performs not well,
# try tri- tree

Solve10less:
	mrmovq (%rdi), %r8            # read val1 from src...         
	iaddq $7, %rdx                # add back
	jge GE3                       # remain_len >= 3

# remain_len between 0 and 2
N02:
	iaddq $2, %rdx                # add back
	jl Done                       # len == 0
	rmmovq %r8, (%rsi)            # ...store val1 to dst
	je N1                         # len == 1
	jmp N2                        # len == 2

# remain_len between 4 and 6
N46:
	iaddq $2, %rdx                # add back
	jl N4                         # len == 4
	je N5                         # len == 5
	jmp N6                        # len == 6

# remain_len >= 3
GE3:
	rmmovq %r8, (%rsi)            # ...store val1 to dst
	je N3                         # len == 3

# remain_len between 4 and 9
N49:	
	iaddq $-4, %rdx               # len -= 4 len = len-3 before
	jl N46                        # 4<=len<=6
	je N7                         # len == 7

# remain_len between 8 and 9
N89:
	iaddq $-1, %rdx               # len --
	je N8                         # len == 8

# handle from 9 to 1
N9:
	andq %r8, %r8                 # val <= 0?
	mrmovq 0x40(%rdi), %r8        # read val from src...
	jle N9OUT                     
	iaddq $1, %rax                # count ++

N9OUT:
	rmmovq %r8, 0x40(%rsi)        # ...store val to dst

N8:
	andq %r8, %r8                 # val <= 0?  
	mrmovq 0x38(%rdi), %r8        # read val from src...  
	jle N8OUT
	iaddq $1, %rax                # count ++

N8OUT:
	rmmovq %r8, 56(%rsi)
N7:
	andq %r8, %r8                  # val <= 0? 
	mrmovq 48(%rdi), %r8           # read val from src...  
	jle N7OUT
	iaddq $1, %rax                 # count ++

N7OUT:
	rmmovq %r8, 48(%rsi)           # ...store val to dst

N6:
	andq %r8, %r8                  # val <= 0?
	mrmovq 40(%rdi), %r8           # read val from src... 
	jle N6OUT
	iaddq $1, %rax                  # count ++

N6OUT:
	rmmovq %r8, 40(%rsi)            # ...store val to dst

N5:
	andq %r8, %r8                   # val <= 0?
	mrmovq 32(%rdi), %r8           # read val from src... 
	jle N5OUT
	iaddq $1, %rax                  # count ++

N5OUT:
	rmmovq %r8, 32(%rsi)               # ...store val to dst
N4:
	andq %r8, %r8                     # val <= 0?
	mrmovq 24(%rdi), %r8               # read val from src... 
	jle N4OUT
	iaddq $1, %rax                    # count ++

N4OUT:
	rmmovq %r8, 24(%rsi)           # ...store val to dst
N3:
	andq %r8, %r8                    # val <= 0?
	mrmovq 16(%rdi), %r8              # read val from src... 
	jle N3OUT
	iaddq $1, %rax                      # count ++

N3OUT:
	rmmovq %r8, 16(%rsi)             # ...store val to dst
N2:
	andq %r8, %r8                    # val <= 0?
	mrmovq 8(%rdi), %r8                  # read val from src... 
	jle N2OUT
	iaddq $1, %rax                    # count ++

N2OUT:
	rmmovq %r8, 8(%rsi)                # ...store val to dst
N1:
	andq %r8, %r8                    # val <= 0?
	jle Done   
	iaddq $1, %rax                     # count ++



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 10.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $10,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $20,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad 4
	.quad 5
	.quad 6
	.quad -7
	.quad -8
	.quad 9
	.quad -10
	.quad 11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad -16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
