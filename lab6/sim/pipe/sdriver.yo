                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Lan Haoning 518021910270
                            | # Describe how and why you modified the baseline code.
                            | # Try1:
                            | # 1.Use iaddq to reduce instructions.
                            | # 2.Use loop unrolling(8) to reduce iterations and index adds.
                            | # 3.Use loop unrolling(2) to handle remain lens.
                            | # score:51.1 thinking...
                            | # Try2:
                            | # 1.Increase loop unrolling 8 ->10 to reduce index adds.
                            | # score:52.9 thinking...
                            | # Try3: 
                            | # Considering when test num is small, the CPE is really big, try to increase the efficiency of handle remain lens.
                            | # 1.Handle the the remain lens by case to reduce index adds.
                            | # 2.Handle some hazards, like mrmovq and rmmovq.
                            | # 3.%rax can be initiate by the program, annotate it.
                            | # score:60.0 finish
                            | # More details can be seen in the annotations.
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
                            | # Considering initial condition ,annotate this
                            | #	xorq %rax,%rax		      # count = 0;
                            | 
                            | #Check if there are 10 elements.
0x032:                      | Test10E:
0x032: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		      # len < 10?
0x03c: 720602000000000000   | 	jl Solve10less		      # if so, goto Solve10less:
                            | 
                            | # 10 loop unrolling
0x045:                      | Loop10:	
0x045: 50170000000000000000 |     mrmovq (%rdi), %rcx	      # read val1 from src...
0x04f: 50870800000000000000 | 	mrmovq 0x8(%rdi), %r8     # read val2 from src...
0x059: 50971000000000000000 | 	mrmovq 0x10(%rdi), %r9    # read val3 from src...
0x063: 50a71800000000000000 | 	mrmovq 0x18(%rdi), %r10   # read val4 from src...
0x06d: 50b72000000000000000 | 	mrmovq 0x20(%rdi), %r11   # read val5 from src...
0x077: 50c72800000000000000 | 	mrmovq 0x28(%rdi), %r12   # read val6 from src...
0x081: 50d73000000000000000 | 	mrmovq 0x30(%rdi), %r13   # read val7 from src...
0x08b: 50e73800000000000000 | 	mrmovq 0x38(%rdi), %r14   # read val8 from src...
0x095: 50574000000000000000 | 	mrmovq 0x40(%rdi), %rbp	  # read val9 from src...
0x09f: 50374800000000000000 | 	mrmovq 0x48(%rdi), %rbx	  # read val10 from src...
                            | 
                            | # TestAB: test the Bth element in A  
0x0a9:                      | Test101:
0x0a9: 6211                 | 	andq %rcx, %rcx		      # val1 <= 0?
0x0ab: 71be00000000000000   | 	jle Test102		          # if so, goto Test102:
0x0b4: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x0be:                      | Test102:
0x0be: 6288                 | 	andq %r8, %r8		      # val2 <= 0?
0x0c0: 71d300000000000000   | 	jle Test103		          # if so, goto Test103:
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x0d3:                      | Test103:
0x0d3: 6299                 | 	andq %r9, %r9		      # val3 <= 0?
0x0d5: 71e800000000000000   | 	jle Test104		          # if so, goto Test104:
0x0de: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x0e8:                      | Test104:
0x0e8: 62aa                 | 	andq %r10, %r10		      # val4 <= 0?
0x0ea: 71fd00000000000000   | 	jle Test105		          # if so, goto Test105:
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x0fd:                      | Test105:
0x0fd: 62bb                 | 	andq %r11, %r11		      # val5 <= 0?
0x0ff: 711201000000000000   | 	jle Test106		          # if so, goto Test106:
0x108: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x112:                      | Test106:
0x112: 62cc                 | 	andq %r12, %r12		      # val6 <= 0?
0x114: 712701000000000000   | 	jle Test107		          # if so, goto Test107:
0x11d: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x127:                      | Test107:
0x127: 62dd                 | 	andq %r13, %r13  	      # val7 <= 0?
0x129: 713c01000000000000   | 	jle Test108		          # if so, goto Test108:
0x132: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x13c:                      | Test108:
0x13c: 62ee                 | 	andq %r14, %r14  	      # val8 <= 0?
0x13e: 715101000000000000   | 	jle Test109		          # if so, goto Test109:
0x147: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x151:                      | Test109:
0x151: 6255                 | 	andq %rbp, %rbp  	      # val9 <= 0?
0x153: 716601000000000000   | 	jle Test1010		      # if so, goto Test1010:
0x15c: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
0x166:                      | Test1010:
0x166: 6233                 | 	andq %rbx, %rbx  	      # val10 <= 0?
0x168: 717b01000000000000   | 	jle Npos10		          # if so, goto Npos10:
0x171: c0f00100000000000000 | 	iaddq $1, %rax		      # count++
                            | 
                            | # Check
0x17b:                      | Npos10:	
                            | 
                            | # Because there is a load-use hazard, move it here
0x17b: 40160000000000000000 |     rmmovq %rcx, (%rsi)	      # ...and store val1 to dst
0x185: 40860800000000000000 | 	rmmovq %r8, 0x8(%rsi)     # ...and store val2 to dst
0x18f: 40961000000000000000 | 	rmmovq %r9, 0x10(%rsi)    # ...and store val3 to dst
0x199: 40a61800000000000000 | 	rmmovq %r10, 0x18(%rsi)   # ...and store val4 to dst
0x1a3: 40b62000000000000000 | 	rmmovq %r11, 0x20(%rsi)   # ...and store val5 to dst
0x1ad: 40c62800000000000000 | 	rmmovq %r12, 0x28(%rsi)   # ...and store val6 to dst
0x1b7: 40d63000000000000000 | 	rmmovq %r13, 0x30(%rsi)   # ...and store val7 to dst
0x1c1: 40e63800000000000000 | 	rmmovq %r14, 0x38(%rsi)   # ...and store val8 to dst
0x1cb: 40564000000000000000 | 	rmmovq %rbp, 0x40(%rsi)   # ...and store val9 to dst
0x1d5: 40364800000000000000 | 	rmmovq %rbx, 0x48(%rsi)   # ...and store val10 to dst
                            | 
0x1df: c0f75000000000000000 | 	iaddq $0x50, %rdi		  # src+=10
0x1e9: c0f65000000000000000 | 	iaddq $0x50, %rsi		  # dst+=10
0x1f3: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx		  # len >= 10?
0x1fd: 754500000000000000   | 	jge Loop10			      # if so, goto Loop10:
                            | 
                            | # Elements less then 10
                            | 
                            | # loop unrolling(2) performs not well here
                            | 
0x206:                      | Solve10less:
0x206: 50870000000000000000 | 	mrmovq (%rdi), %r8         # read val1 from src...         
0x210: c0f20700000000000000 | 	iaddq $7, %rdx             # add back
0x21a: 757702000000000000   | 	jge GE3                    # remain_len >= 3
                            | 
                            | # remain_len between 0 and 2
0x223:                      | N02:
0x223: c0f20200000000000000 | 	iaddq $2, %rdx             # add back
0x22d: 721604000000000000   | 	jl Done                    # len == 0
0x236: 40860000000000000000 | 	rmmovq %r8, (%rsi)         # ...store val1 to dst
0x240: 730104000000000000   | 	je N1                      # len == 1
0x249: 70d803000000000000   | 	jmp N2                     # len == 2
                            | 
                            | # remain_len between 4 and 6
0x252:                      | N46:
0x252: c0f20200000000000000 | 	iaddq $2, %rdx             # add back
0x25c: 728603000000000000   | 	jl N4                      # len == 4
0x265: 735d03000000000000   | 	je N5                      # len == 5
0x26e: 703403000000000000   | 	jmp N6                     # len == 6
                            | 
                            | # remain_len >= 3
0x277:                      | GE3:
0x277: 40860000000000000000 | 	rmmovq %r8, (%rsi)         # ...store val to dst
0x281: 73af03000000000000   | 	je N3                      # len == 3
                            | 
                            | # remain_len between 4 and 9
0x28a:                      | N49:	
0x28a: c0f2fcffffffffffffff | 	iaddq $-4, %rdx            # len -= 4 PS:len -= 3 before
0x294: 725202000000000000   | 	jl N46                     # 4<=len<=6
0x29d: 730b03000000000000   | 	je N7                      # len == 7
                            | 
                            | # remain_len between 8 and 9
0x2a6:                      | N89:
0x2a6: c0f2ffffffffffffffff | 	iaddq $-1, %rdx            # len --
0x2b0: 73e202000000000000   | 	je N8                      # len == 8
                            | 
                            | # handle from 9 to 1
0x2b9:                      | N9:
0x2b9: 6288                 | 	andq %r8, %r8              # val <= 0?
0x2bb: 50874000000000000000 | 	mrmovq 0x40(%rdi), %r8     # read val from src...
0x2c5: 71d802000000000000   | 	jle N9OUT                  # if so, goto N9OUT:   
0x2ce: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x2d8:                      | N9OUT:
0x2d8: 40864000000000000000 | 	rmmovq %r8, 0x40(%rsi)     # ...store val to dst
0x2e2:                      | N8:
0x2e2: 6288                 | 	andq %r8, %r8              # val <= 0?  
0x2e4: 50873800000000000000 | 	mrmovq 0x38(%rdi), %r8     # read val from src...  
0x2ee: 710103000000000000   | 	jle N8OUT                  # if so, goto N8OUT:
0x2f7: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x301:                      | N8OUT:
0x301: 40863800000000000000 | 	rmmovq %r8, 0x38(%rsi)     # ...store val to dst
0x30b:                      | N7:
0x30b: 6288                 | 	andq %r8, %r8              # val <= 0? 
0x30d: 50873000000000000000 | 	mrmovq 0x30(%rdi), %r8     # read val from src...  
0x317: 712a03000000000000   | 	jle N7OUT                  # if so, goto N7OUT:
0x320: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x32a:                      | N7OUT:
0x32a: 40863000000000000000 | 	rmmovq %r8, 0x30(%rsi)     # ...store val to dst
0x334:                      | N6:
0x334: 6288                 | 	andq %r8, %r8              # val <= 0?
0x336: 50872800000000000000 | 	mrmovq 0x28(%rdi), %r8     # read val from src... 
0x340: 715303000000000000   | 	jle N6OUT                  # if so, goto N6OUT:
0x349: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x353:                      | N6OUT:
0x353: 40862800000000000000 | 	rmmovq %r8, 0x28(%rsi)     # ...store val to dst
                            | 
0x35d:                      | N5:
0x35d: 6288                 | 	andq %r8, %r8              # val <= 0?
0x35f: 50872000000000000000 | 	mrmovq 0x20(%rdi), %r8     # read val from src... 
0x369: 717c03000000000000   | 	jle N5OUT                  # if so, goto N5OUT:
0x372: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x37c:                      | N5OUT:
0x37c: 40862000000000000000 | 	rmmovq %r8, 0x20(%rsi)     # ...store val to dst
0x386:                      | N4:
0x386: 6288                 | 	andq %r8, %r8              # val <= 0?
0x388: 50871800000000000000 | 	mrmovq 0x18(%rdi), %r8     # read val from src... 
0x392: 71a503000000000000   | 	jle N4OUT                  # if so, goto N4OUT:
0x39b: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x3a5:                      | N4OUT:
0x3a5: 40861800000000000000 | 	rmmovq %r8, 0x18(%rsi)     # ...store val to dst
0x3af:                      | N3:
0x3af: 6288                 | 	andq %r8, %r8              # val <= 0?
0x3b1: 50871000000000000000 | 	mrmovq 0x10(%rdi), %r8     # read val from src... 
0x3bb: 71ce03000000000000   | 	jle N3OUT                  # if so, goto N3OUT:
0x3c4: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x3ce:                      | N3OUT:
0x3ce: 40861000000000000000 | 	rmmovq %r8, 0x10(%rsi)     # ...store val to dst
0x3d8:                      | N2:
0x3d8: 6288                 | 	andq %r8, %r8              # val <= 0?
0x3da: 50870800000000000000 | 	mrmovq 0x8(%rdi), %r8      # read val from src... 
0x3e4: 71f703000000000000   | 	jle N2OUT                  # if so, goto N2OUT:
0x3ed: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
0x3f7:                      | N2OUT:
0x3f7: 40860800000000000000 | 	rmmovq %r8, 0x8(%rsi)      # ...store val to dst
0x401:                      | N1:
0x401: 6288                 | 	andq %r8, %r8              # val <= 0?
0x403: 711604000000000000   | 	jle Done                   # if so, goto Done:
0x40c: c0f00100000000000000 | 	iaddq $1, %rax             # count ++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x416:                      | Done:
0x416: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x417:                      | End:
                            | #/* $end ncopy-ys */
0x417:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: ffffffffffffffff     | 	.quad -1
0x420: feffffffffffffff     | 	.quad -2
0x428: 0300000000000000     | 	.quad 3
0x430: 0400000000000000     | 	.quad 4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
